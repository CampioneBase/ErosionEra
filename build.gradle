plugins {
	id 'fabric-loom' version '1.1-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.
	maven {
		url 'https://maven.aliyun.com/nexus/content/groups/public'
	}
	maven {
		url 'https://repository.hanbings.io/proxy'
	}
	maven {
		name = 'Ladysnake Mods'
		url = 'https://ladysnake.jfrog.io/artifactory/mods'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// Uncomment the following line to enable the deprecated Fabric API modules.
	// 取消对以下行的注释以启用不推荐使用的结构API模块。
	// These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.
	// 这些都包含在Fabric API生产分发中，允许您在以后更方便的时候将mod更新到最新的模块。

	// Adds a dependency on the base cardinal components module (required by every other module)
	// 添加对基本组件模块的依赖项（其他模块都需要）
	// Replace modImplementation with modApi if you expose components in your own API
	// 如果在自己的API中公开组件，请将modImplementation 替换为 modApi
	modImplementation "dev.onyxstudios.cardinal-components-api:cardinal-components-base:5.0.0"
	// Adds a dependency on a specific module
	// 添加对特定模块的依赖项
//	modImplementation "dev.onyxstudios.cardinal-components-api:1.19.2:5.0.0"
	// Includes Cardinal Components API as a Jar-in-Jar dependency (optional)
	// 包括作为Jar-in-Jar依赖项的基本组件API（可选）
	include "dev.onyxstudios.cardinal-components-api:cardinal-components-base:5.0.0"
//	include "dev.onyxstudios.cardinal-components-api:1.19.2:5.0.0"
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

loom {
	runs {
		// 添加一个新的 gradle 任务，会运行数据生成 API：“gradlew runDatagenClient”
		datagenClient {
			inherit client
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.strict-validation"

			runDir "build/datagen"
		}
	}
}

// 将数据生成的文件添加到 jar 中。
sourceSets {
	main {
		resources {
			srcDirs += [
					'src/main/generated'
			]
		}
	}
}